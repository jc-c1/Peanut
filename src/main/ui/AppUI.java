package ui;

import model.Event;
import model.EventLog;
import model.journal.*;
import model.user.*;
import persistence.*;
import ui.display.*;
import ui.form.*;
import ui.menu.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

// represents APP user interface, uses Swing: https://docs.oracle.com/javase/tutorial/uiswing/
// images in data generated by an unknown program.
// Event logs from app usage logs onto console after closing app, inspired by:
// https://github.students.cs.ubc.ca/CPSC210/AlarmSystem/blob/main/src/main/ca/ubc/cpsc210/alarm/model/EventLog.java
// uses https://docs.oracle.com/javase/tutorial/uiswing/events/windowlistener.html
public class AppUI extends JFrame implements WindowListener {
    private static final int WIDTH = 800;
    private static final int HEIGHT = 600;

    private JPanel main;
    private JLabel message;
    private JPanel listDisplay;

    private HomeMenu homeMenu;
    private ParentMenu parentMenu;
    private PeanutMenu peanutMenu;
    private MemoryMenu memoryMenu;

    private JsonWriter jsonWriter;
    private JsonReader jsonReader;

//    private static final String JSON_FILE_PATH = "./data/";
//    private static final String JSON_FILE_TYPE = ".json";
    private static String fileName = "";
    private static String jsonStore = "./data/peanut.json";


//    private ParentSelect parentSelect;
//    private PeanutSelect peanutSelect;
//    private MemorySelect memorySelect;

    private ParentList parentList;
    private List<Parent> parents;
    private Parent currentParent;
    private Peanut currentPeanut;
    private Entry currentMemory;


    // EFFECTS: Constructs AppUI class
    public AppUI() {
        super("Peanut App");

        parents = new ArrayList<>();
        parentList = new ParentList();
        parents = parentList.getParents();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setMinimumSize(new Dimension(WIDTH, HEIGHT));
        addWindowListener(this);
        runApp();
    }

    // MODIFIES: this
    // EFFECTS: removes and reset all the components, set size of panel, and call init
    public void runApp() {
        getContentPane().removeAll();
        repaint();
        currentParent = null;
        currentPeanut = null;
        currentMemory = null;
        main = new JPanel();
        main.setLayout(new BoxLayout(main, BoxLayout.Y_AXIS));

        init();

    }


    // MODIFIES: this
    // EFFECTS: load initial home screen
    public void init() {
        listDisplay = new HomeDisplay(this);
        main.add(listDisplay);
        homeMenu = new HomeMenu(this);
        main.add(homeMenu);
        message = new JLabel("", JLabel.CENTER);
        main.add(message);
        add(main);
        setVisible(true);

    }

    // MODIFIES: this
    // EFFECTS: reset displays between screen changes
    public void resetDisplay() {
        getContentPane().removeAll();
        repaint();
        main = new JPanel();
        main.setLayout(new BoxLayout(main, BoxLayout.Y_AXIS));
        message = new JLabel("", JLabel.CENTER);
        main.add(message);

        add(main);
        setVisible(true);
    }

    // MODIFIES: this
    // EFFECTS: display parent screen depending on current parent
    public void displayParent(String s) {
        hideHomePage();
        for (Parent p : parents) {
            if (p.getFirstName().equals(s)) {
                currentParent = p;
            }
        }
        if (currentParent != null) {
            listDisplay = new ParentDisplay(this, currentParent);
            main.add(listDisplay);
            parentMenu = new ParentMenu(this);
            main.add(parentMenu);
        } else {
            runApp();
        }
    }

    // MODIFIES: this
    // EFFECTS: displaying home screen after first initialization
    public void displayHome() {
        resetDisplay();
        homeMenu = new HomeMenu(this);
        listDisplay = new HomeDisplay(this);
        message = new JLabel("", JLabel.CENTER);
        main.add(listDisplay);
        main.add(homeMenu);
        main.add(message);
        add(main);
        setVisible(true);
    }


    // MODIFIES: this
    // EFFECTS: clear/hide display of home page
    private void hideHomePage() {
        resetDisplay();
        listDisplay.setVisible(false);
        homeMenu.setVisible(false);
        message.setVisible(false);
    }

    // MODIFIES: this
    // EFFECTS: clear/hide display of parent page
    private void hideParentPage() {
        resetDisplay();
        listDisplay.setVisible(false);
        parentMenu.setVisible(false);
        message.setVisible(false);
    }

    // MODIFIES: this
    // EFFECTS: clear/hide display of peanut page
    private void hidePeanutPage() {
        resetDisplay();
        listDisplay.setVisible(false);
        peanutMenu.setVisible(false);
        message.setVisible(false);
    }

//    // MODIFIES: this
//    // EFFECTS: clear/hide display of memory page
//    private void hideMemoryPage() {
//        resetDisplay();
//        listDisplay.setVisible(false);
//        memoryMenu.setVisible(false);
//    }


    // MODIFIES: this
    // EFFECTS: display peanut screen depending on current peanut
    public void displayPeanut(String s) {
        hideParentPage();
        for (Peanut p : currentParent.getPeanutsOfParent()) {
            if (p.getFirstName().equals(s)) {
                currentPeanut = p;
            }
        }
        if (currentPeanut != null) {
            listDisplay = new PeanutDisplay(this, currentPeanut);
            main.add(listDisplay);
            peanutMenu = new PeanutMenu(this);
            main.add(peanutMenu);
        } else {
            runApp();
        }
    }

    // MODIFIES: this
    // EFFECTS: display memory screen depending on current memory
    public void displayMemory(String s) {
        hidePeanutPage();
        for (Entry p : currentPeanut.getJournal().getIndex()) {
            if (p.getTitle().equals(s)) {
                currentMemory = p;
            }
        }
        if (currentPeanut != null) {
            listDisplay = new MemoryDisplay(currentMemory);
            main.add(listDisplay);
            memoryMenu = new MemoryMenu(this);
            main.add(memoryMenu);
        } else {
            runApp();
        }
    }

    // MODIFIES: this, Parent
    // EFFECTS: add a Parent
    public void addParent(Parent pr) {
        parents.add(pr);
    }

    // MODIFIES: this, Parent
    // EFFECTS: get parent info from form and add a Parent
    public void getParentFormInfo() {
        hideHomePage();
        ParentCreate pg = new ParentCreate(this);
        main.add(pg);
    }

    // MODIFIES: this, Peanut
    // EFFECTS: get Peanut info from form and add a Peanut
    public void getPeanutFormInfo() {
        hideParentPage();
        PeanutCreate pn = new PeanutCreate(this);
        main.add(pn);
    }

    // MODIFIES: this, Memory
    // EFFECTS: add a Memory
    public void addMemory(Memory m) {
        currentPeanut.getJournal().addEntry(m);
    }

    // MODIFIES: this, Memory
    // EFFECTS: get Memory info from form and add a Memory
    public void getMemoryFormInfo() {
        hidePeanutPage();
        MemoryCreate m = new MemoryCreate(this);
        main.add(m);
    }

    // EFFECTS: get current Parent
    public Parent getCurrentParent() {
        return currentParent;
    }

    // EFFECTS: get current Peanut
    public Peanut getCurrentPeanut() {
        return currentPeanut;
    }

    // EFFECTS: get Parents
    public List<Parent> getParents() {
        return parents;
    }

    // EFFECTS: get current Memory
    public Entry getCurrentMemory() {
        return currentMemory;
    }

//    // EFFECTS: set message
//    public void setMessage(String message) {
//        this.message.setText(message);
//    }

    // MODIFIES: this, Memory
    // EFFECTS: get Memory info from form and update a Memory
    public void getMemoryUpdateFormInfo() {
        hidePeanutPage();
        String title = currentMemory.getTitle();
        String content = currentMemory.getContent();

        MemoryUpdate m = new MemoryUpdate(this, currentMemory);
        main.add(m);
    }

    // MODIFIES: this
    // EFFECTS: reset currentMemory/Peanut/Parent as according to which one to return and display
    public void returnToLast() {
        if (currentMemory != null) {
            currentMemory = null;
            displayPeanut(currentPeanut.getFirstName());
        } else if (currentPeanut != null) {
            currentPeanut = null;
            displayParent(currentParent.getFirstName());
        } else if (currentParent != null) {
            currentParent = null;
            displayHome();
        }
    }


    // MODIFIES: this, if saveFile is called after "load"
    // EFFECTS: save current state of parentList to the file destination of jsonWriter
    public void saveFile() {
        if (parentList == null) {
            System.out.println("nothing to save");
        } else {
            try {
                jsonWriter = new JsonWriter(jsonStore);
                jsonWriter.open();
                jsonWriter.write(parentList);
                jsonWriter.close();

            } catch (FileNotFoundException e) {
                System.out.println("Unable to write to file: " + jsonStore);
            }
        }
    }

    // MODIFIES: this
    // EFFECTS: load last saved file state
    public void loadFile() {
        jsonReader = new JsonReader(jsonStore);
        jsonWriter = new JsonWriter(jsonStore);
        try {
            parentList = jsonReader.read();
            parents = parentList.getParents();
            displayHome();
        } catch (IOException e) {
            System.out.println("*** Unable to load file [" + fileName + "] from [" + jsonStore + "] ***");
            System.out.println(">> Please make selection from previous again!");
            jsonReader = null;
        }

        EventLog.getInstance().clear();
    }


    // MODIFIES: this, Memory
    // EFFECTS: delete current Memory and return to peanut page
    public void memoryDelete() {
        currentPeanut.getJournal().removeEntry(currentMemory);
        currentMemory = null;
        displayPeanut(currentPeanut.getFirstName());
    }

    @Override
    public void windowOpened(WindowEvent e) {

    }



    public void printLog(EventLog el) {
        for (Event e : el) {
            System.out.println(e.toString());
        }
    }

    @Override
    public void windowClosing(WindowEvent e) {
        printLog(EventLog.getInstance());
    }

    @Override
    public void windowClosed(WindowEvent e) {
//        System.out.println("aaaa");
    }

    @Override
    public void windowIconified(WindowEvent e) {

    }

    @Override
    public void windowDeiconified(WindowEvent e) {

    }

    @Override
    public void windowActivated(WindowEvent e) {

    }

    @Override
    public void windowDeactivated(WindowEvent e) {

    }
}
